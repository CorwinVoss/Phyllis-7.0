#pragma once
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
//#include <opencv2/contrib/contrib.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d.hpp>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <map>
#include <vector>
#include <string>
#include <math.h>
#include <Timer.h>

namespace grip {

// Summary:
//
struct CameraStuff
{
	double targetHeight;
	double angle;

	CameraStuff(double height, double angle)
	{
		targetHeight = height;
		this->angle = angle;
	}

	CameraStuff()
	{
		targetHeight = 0;
		this->angle = 0;
	}
};

#define BOILER grip::CameraStuff(CS_TARGET_BOILER_HEIGHT, CS_CAM2_HORIZON_ANGLE)
#define PEG	grip::CameraStuff(CS_TARGET_PEG_HEIGHT, CS_CAM1_HORIZON_ANGLE)

/**
* GripPipeline class.
* 
* An OpenCV pipeline generated by GRIP.
*/
class GripPipeline
{
	private:
		bool switchSwitch;
		cv::Mat switchOutput;
		cv::Mat resizeImageOutput;
		cv::Mat hslThresholdOutput;
		std::vector<std::vector<cv::Point> > findContoursOutput;
		std::vector<std::vector<cv::Point> > filterContoursOutput;
		std::vector<cv::Rect> targets;
		frc::Timer* timer;
		double procTime;
		CameraStuff stuff;
		template<typename T>
		void pipelineswitch(bool sw, T &onTrue, T &onFalse, T &output);
		void resizeImage(cv::Mat &, double , double , int , cv::Mat &);
		void hslThreshold(cv::Mat &, double [], double [], double [], cv::Mat &);
		void findContours(cv::Mat &, bool , std::vector<std::vector<cv::Point> > &);
		void filterContours(std::vector<std::vector<cv::Point> > &, double , double , double , double , double , double , double [], double , double , double , double , std::vector<std::vector<cv::Point> > &);

	public:
		GripPipeline();
		void Process(cv::Mat source0);
		void setsource0(cv::Mat &source0);
	 	void setSwitch0(bool value);
		cv::Mat* getswitchOutput();
		cv::Mat* getresizeImageOutput();
		cv::Mat* gethslThresholdOutput();
		std::vector<std::vector<cv::Point> >* getfindContoursOutput();
		std::vector<std::vector<cv::Point> >* getfilterContoursOutput();
		bool getTarget(int, cv::Rect&);
		double getTargetCenterX(int);
		double getTargetCenterY(int);
		double getProcTime();
		double getDistance();

		void setStuff(grip::CameraStuff cs);
};


} // end namespace grip


